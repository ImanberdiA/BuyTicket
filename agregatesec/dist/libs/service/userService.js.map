{"version":3,"sources":["../../../libs/service/userService.js"],"names":[],"mappings":"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","file":"userService.js","sourcesContent":["const mysql = require('mysql');\r\nlet connection = undefined;\r\n\r\nclass userService {\r\n    static init() {\r\n        connection = mysql.createConnection({\r\n            host: 'localhost',\r\n            user: 'root',\r\n            password: '',\r\n            database: 'user_side'\r\n        });\r\n        return userService;\r\n    }\r\n\r\n    // Get all users from users (or size users)\r\n    static getUsers(size) {\r\n        return new Promise((resolve, reject) => {\r\n            connection.connect(function (err) {\r\n                const query = connection.query('SELECT * FROM users LIMIT ?', size, function (err, result) {\r\n                    console.log(result);\r\n                    resolve(result);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    // Get a specific user from users-table\r\n    static getSpecificUser(userId) {\r\n        return new Promise((resolve, reject) => {\r\n            connection.connect(function (err) {\r\n                const query = connection.query('SELECT * FROM users WHERE id=?', userId, function (err, result) {\r\n                    console.log(result);\r\n                    resolve(result);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    // Create new user in users-table\r\n    static createNewUser(dataNewUser) {\r\n        return new Promise((resolve, reject) => {\r\n            const insertValues = {\r\n                \"Login\": dataNewUser.Login,\r\n                \"Password\": dataNewUser.Password,\r\n                \"FirstName\": dataNewUser.FirstName,\r\n                \"LastName\": dataNewUser.LastName\r\n            };\r\n            connection.connect(function (err) {\r\n                const query = connection.query('INSERT INTO users SET ?', insertValues, function (err, result) {\r\n                    if(!err){\r\n                        resolve(JSON.stringify({message: 'New User Created!'}));\r\n                    } else{\r\n                        resolve(JSON.stringify({message: 'Error: New User Was Not Created!'}));\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    // Update specific user in users-table\r\n    static updateUser(dataUpdateUser, userId) {\r\n        return new Promise((resolve, reject) => {\r\n            const insertValues = {\r\n                Login: dataUpdateUser.Login,\r\n                Password: dataUpdateUser.Password,\r\n                FirstName: dataUpdateUser.FirstName,\r\n                LastName: dataUpdateUser.LastName\r\n            };\r\n            connection.connect(function (err) {\r\n                const query = connection.query('UPDATE users set ? WHERE id = ?', [insertValues, userId], function (err, result) {\r\n                    console.log(result);\r\n                    resolve(result);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    // Delete a specific user in users-table\r\n    static deleteUser(userId) {\r\n        return new Promise((resolve, reject) => {\r\n            connection.connect(function (err) {\r\n                const query = connection.query('DELETE FROM users WHERE id = ?', [userId], function (err, result) {\r\n                    resolve(result);\r\n                });\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nmodule.exports = userService.init();"]}