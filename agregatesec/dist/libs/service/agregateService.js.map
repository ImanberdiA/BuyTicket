{"version":3,"sources":["../../../libs/service/agregateService.js"],"names":[],"mappings":"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","file":"agregateService.js","sourcesContent":["let reqPromGetAllContent = require('request-promise');\r\nlet reqPromGetSpecificContent = require('request-promise');\r\nlet reqPromCreateNewContent = require('request-promise');\r\nlet reqPromUpdateContent = require('request-promise');\r\nlet reqPromDeleteContent = require('request-promise');\r\n\r\nlet reqPromGetAllUser = require('request-promise');\r\nlet reqPromGetSpecificUser = require('request-promise');\r\nlet reqPromCreateNewUser = require('request-promise');\r\nlet reqPromUpdateUser = require('request-promise');\r\nlet reqPromDeleteUser = require('request-promise');\r\n\r\nlet reqPromGetAllPlaylist = require('request-promise');\r\nlet reqPromGetSpecificPlaylist = require('request-promise');\r\nlet reqPromCreateNewPlaylist = require('request-promise');\r\nlet reqPromUpdatePlaylist = require('request-promise');\r\nlet reqPromDeletePlaylist = require('request-promise');\r\n\r\nlet reqPromAuth = require('request-promise');\r\n\r\nconst mysql = require('mysql');\r\nlet connection = undefined;\r\n\r\nclass agregateService {\r\n    static init() {\r\n        connection = mysql.createConnection({\r\n            host: 'localhost',\r\n            user: 'root',\r\n            password: '',\r\n            database: 'user_side'\r\n        });\r\n        return agregateService;\r\n    }\r\n\r\n    /* CONTENTS SERVICE. BEGIN */\r\n\r\n    /* Get All Contents from content service. Begin*/\r\n    static async getAllContents(req, res, countOfItems){\r\n        try {\r\n            const contentResponses = await agregateService.getAllContentRequestMethod(countOfItems);\r\n            return contentResponses;\r\n        } catch (error) {\r\n            res.status(523);\r\n            res.send(JSON.stringify({message: 'Error: agregateService/getAllContents'}));\r\n            console.log(\"Error: agregateService/getAllContents\");\r\n        }\r\n    }\r\n    static getAllContentRequestMethod(countOfItems) {\r\n        return new Promise((resolve, reject) => {\r\n            reqPromGetAllContent({\r\n                method: 'GET',\r\n                uri: 'http://localhost:1001/con/contents',\r\n                json: true\r\n            }).then(function (response) {\r\n                resolve(response);\r\n            }).catch(function (err) {\r\n                resolve(\"Error: agregateService/getAllContentRequestMethod\");\r\n            });\r\n        });\r\n    }\r\n    /* Get All Contents from content service. End*/\r\n\r\n    /* Get Specific Content from content service. Begin*/\r\n    static async getSpecificContent(req, res, contentId){\r\n        try {\r\n            const contentResponse = await agregateService.getSpecificContentRequestMethod(contentId);\r\n            return contentResponse;\r\n        } catch (error) {\r\n            res.status(523);\r\n            res.send(JSON.stringify({message: 'Error: agregateService/getSpecificContent'}));\r\n            console.log(\"Error: agregateService/getSpecificContent\");\r\n        }\r\n    }\r\n    static getSpecificContentRequestMethod(contentId) {\r\n        return new Promise((resolve, reject) => {\r\n            reqPromGetSpecificContent({\r\n                method: 'GET',\r\n                uri: 'http://localhost:1001/con/contents/' + contentId,\r\n                json: true\r\n            }).then(function (response) {\r\n                resolve(response);\r\n            }).catch(function (err) {\r\n                resolve(\"Error: agregateService/getSpecificContentRequestMethod\");\r\n            });\r\n        });\r\n    }\r\n    /* Get Specific Content from content service. End*/\r\n\r\n    /* Create New Content in content service. Begin*/\r\n    static async createNewContent(req, res, dataNewContent, token){\r\n        try {\r\n            const contentResponses = await agregateService.createNewContentRequestMethod(dataNewContent, token);\r\n            return contentResponses;\r\n        } catch (error) {\r\n            res.status(523);\r\n            console.log(\"Error: agregateService/getSpecificContent\");\r\n            res.send(JSON.stringify({message: 'Error: agregateService/getSpecificContent'}));\r\n        }\r\n    }\r\n    static createNewContentRequestMethod(dataNewContent, token) {\r\n        return new Promise((resolve, reject) => {\r\n            reqPromCreateNewContent({\r\n                method: 'POST',\r\n                uri: 'http://localhost:1001/con/contents',\r\n                body: dataNewContent,\r\n                json: true,\r\n                headers: {\r\n                    /* 'content-type': 'application/x-www-form-urlencoded' */ // Is set automatically\r\n                    Authorization: token\r\n                }\r\n            }).then(function (response) {\r\n                resolve(response);\r\n            }).catch(function (err) {\r\n                resolve(\"Error: agregateService/createNewContentRequestMethod\");\r\n            });\r\n        });\r\n    }\r\n    /* Create New Content in content service. End*/\r\n\r\n    /* Update Specific Content in content service. Begin*/\r\n    static async updateContent(req, res, dataUpdateContent, contentId, token){\r\n        try {\r\n            const contentResponses = await agregateService.updateContentRequestMethod(dataUpdateContent, contentId, token);\r\n            return contentResponses;\r\n        } catch (error) {\r\n            res.status(523);\r\n            console.log(\"Error: agregateService/getSpecificContent\");\r\n            res.send(JSON.stringify({message: 'Error: agregateService/getSpecificContent'}));\r\n        }\r\n    }\r\n    static updateContentRequestMethod(dataUpdateContent, contentId, token) {\r\n        return new Promise((resolve, reject) => {\r\n            reqPromUpdateContent({\r\n                method: 'PUT',\r\n                uri: 'http://localhost:1001/con/contents/' + contentId,\r\n                body: dataUpdateContent,\r\n                json: true,\r\n                headers: {\r\n                    /* 'content-type': 'application/x-www-form-urlencoded' */ // Is set automatically\r\n                    Authorization: token\r\n                }\r\n            }).then(function (response) {\r\n                resolve(response);\r\n            }).catch(function (err) {\r\n                resolve(\"Error: agregateService/updateContentRequestMethod\");\r\n            });\r\n        });\r\n    }\r\n    /* Update Specific Content in content service. End*/\r\n\r\n    /* Delete Specific Content in content service. Begin*/\r\n    static async deleteContent(req, res, contentId, token){\r\n        try {\r\n            const contentResponses = await agregateService.deleteContentRequestMethod(contentId, token);\r\n            return contentResponses;\r\n        } catch (error) {\r\n            res.status(523);\r\n            console.log(\"Error: agregateService/deleteContent\");\r\n            res.send(JSON.stringify({message: 'Error: agregateService/deleteContent'}));\r\n        }\r\n    }\r\n    static deleteContentRequestMethod(contentId, token) {\r\n        return new Promise((resolve, reject) => {\r\n            reqPromDeleteContent({\r\n                method: 'DELETE',\r\n                uri: 'http://localhost:1001/con/contents/' + contentId,\r\n                json: true,\r\n                headers: {\r\n                    /* 'content-type': 'application/x-www-form-urlencoded' */ // Is set automatically\r\n                    Authorization: token\r\n                }\r\n            }).then(function (response) {\r\n                resolve(response);\r\n            }).catch(function (err) {\r\n                resolve(\"Error: agregateService/deleteContentRequestMethod\");\r\n            });\r\n        });\r\n    }\r\n    /* Delete Specific Content in content service. End*/\r\n\r\n    /* CONTENTS SERVICE. END */\r\n\r\n\r\n    /* USERS SERVICE. BEGIN */\r\n\r\n    /* Get All Users from user service. Begin*/\r\n    static async getAllUsers(req, res, countOfItems){\r\n        try {\r\n            const userResponses = await agregateService.getAllUserRequestMethod(countOfItems);\r\n            return userResponses;\r\n        } catch (error) {\r\n            res.status(523);\r\n            console.log(\"Error: agregateService/getAllUsers\");\r\n            return JSON.stringify({message: 'Error: agregateService/getAllUsers'});\r\n        }\r\n    }\r\n    static getAllUserRequestMethod(countOfItems) {\r\n        return new Promise((resolve, reject) => {\r\n            reqPromGetAllUser({\r\n                method: 'GET',\r\n                uri: 'http://localhost:1000/users',\r\n                json: true\r\n            }).then(function (response) {\r\n                resolve(response);\r\n            }).catch(function (err) {\r\n                resolve(\"Error: agregateService/getAllUserRequestMethod\");\r\n            });\r\n        });\r\n    }\r\n    /* Get All Users from user service. End*/\r\n\r\n    /* Get Specific User from user service. Begin*/\r\n    static async getSpecificUser(req, res, userId){\r\n        try {\r\n            const userResponses = await agregateService.getSpecificUserRequestMethod(userId);\r\n            return userResponses;\r\n        } catch (error) {\r\n            res.status(523);\r\n            console.log(\"Error: agregateService/getSpecificUser\");\r\n            return JSON.stringify({message: 'Error: agregateService/getSpecificUser'});\r\n        }\r\n    }\r\n    static getSpecificUserRequestMethod(userId) {\r\n        return new Promise((resolve, reject) => {\r\n            reqPromGetSpecificUser({\r\n                method: 'GET',\r\n                uri: 'http://localhost:1000/users/' + userId,\r\n                json: true\r\n            }).then(function (response) {\r\n                resolve(response);\r\n            }).catch(function (err) {\r\n                resolve(\"Error: agregateService/getSpecificUserRequestMethod\");\r\n            });\r\n        });\r\n    }\r\n    /* Get Specific User from user service. End*/\r\n\r\n    /* Create New User in user service. Begin*/\r\n    static async createNewUser(req, res, dataNewUser, token){\r\n        try {\r\n            const userResponses = await agregateService.createNewUserRequestMethod(dataNewUser, token);\r\n            return userResponses;\r\n        } catch (error) {\r\n            res.status(523);\r\n            console.log(\"Error: agregateService/createNewUser\");\r\n            return JSON.stringify({message: \"Error: agregateService/createNewUser\"});\r\n        }\r\n    }\r\n    static createNewUserRequestMethod(dataNewUser, token) {\r\n        return new Promise((resolve, reject) => {\r\n            reqPromCreateNewUser({\r\n                method: 'POST',\r\n                uri: 'http://localhost:1000/users',\r\n                body: dataNewUser,\r\n                json: true,\r\n                headers: {\r\n                    /* 'content-type': 'application/x-www-form-urlencoded' */ // Is set automatically\r\n                    Authorization: token\r\n                }\r\n            }).then(function (response) {\r\n                resolve(response);\r\n            }).catch(function (err) {\r\n                resolve(\"Error: agregateService/createNewUserRequestMethod\");\r\n            });\r\n        });\r\n    }\r\n    /* Create New User in user service. End*/\r\n\r\n    /* Update Specific User in user service. Begin*/\r\n    static async updateUser(req, res, dataUpdateUser, userId, token){\r\n        try {\r\n            const userResponses = await agregateService.updateUserRequestMethod(dataUpdateUser, userId, token);\r\n            return userResponses;\r\n        } catch (error) {\r\n            res.status(523);\r\n            console.log(\"Error: agregateService/updateUser\");\r\n            return JSON.stringify({message: 'Error: agregateService/updateUser'});\r\n        }\r\n    }\r\n    static updateUserRequestMethod(dataUpdateUser, userId, token) {\r\n        return new Promise((resolve, reject) => {\r\n            reqPromUpdateUser({\r\n                method: 'PUT',\r\n                uri: 'http://localhost:1000/users/' + userId,\r\n                body: dataUpdateUser,\r\n                json: true,\r\n                headers: {\r\n                    /* 'content-type': 'application/x-www-form-urlencoded' */ // Is set automatically\r\n                    Authorization: token\r\n                }\r\n            }).then(function (response) {\r\n                resolve(response);\r\n            }).catch(function (err) {\r\n                resolve(\"Error: agregateService/updateUserRequestMethod\");\r\n            });\r\n        });\r\n    }\r\n    /* Update Specific User in user service. End*/\r\n\r\n    /* Delete Specific User in user service. Begin*/\r\n    static async deleteUser(req, res, userId, token){\r\n        try {\r\n            const userResponses = await agregateService.deleteUserRequestMethod(userId, token);\r\n            return userResponses;\r\n        } catch (error) {\r\n            res.status(523);\r\n            console.log(\"Error: agregateService/deleteUser\");\r\n            return JSON.stringify({message: 'Error: agregateService/deleteUser'});\r\n        }\r\n    }\r\n    static deleteUserRequestMethod(userId, token) {\r\n        return new Promise((resolve, reject) => {\r\n            reqPromDeleteUser({\r\n                method: 'DELETE',\r\n                uri: 'http://localhost:1000/users/' + userId,\r\n                json: true,\r\n                headers: {\r\n                    /* 'content-type': 'application/x-www-form-urlencoded' */ // Is set automatically\r\n                    Authorization: token\r\n                }\r\n            }).then(function (response) {\r\n                resolve(response);\r\n            }).catch(function (err) {\r\n                resolve(\"Error: agregateService/deleteUserRequestMethod\");\r\n            });\r\n        });\r\n    }\r\n    /* Delete Specific User in user service. End*/\r\n\r\n    /* USERS SERVICE. END */\r\n\r\n\r\n    /* PLAYLISTS SERVICE. BEGIN */\r\n\r\n    /* Get All Playlists from playlist service. Begin*/\r\n    static async getAllPlaylist(req, res, countOfItems){\r\n        try {\r\n            const playlistResponses = await agregateService.getAllPlaylistRequestMethod(countOfItems);\r\n            return playlistResponses;\r\n        } catch (error) {\r\n            res.status(523);\r\n            console.log(\"Error: agregateService/getAllPlaylist\");\r\n            return JSON.stringify({message: 'Error: agregateService/getAllPlaylist'});\r\n        }\r\n    }\r\n    static getAllPlaylistRequestMethod(countOfItems) {\r\n        return new Promise((resolve, reject) => {\r\n            reqPromGetAllPlaylist({\r\n                method: 'GET',\r\n                uri: 'http://localhost:1002/playlists/?counts=' + countOfItems,\r\n                json: true\r\n            }).then(function (response) {\r\n                resolve(response);\r\n            }).catch(function (err) {\r\n                resolve(\"Error: agregateService/getAllPlaylistRequestMethod\");\r\n            });\r\n        });\r\n    }\r\n    /* Get All Playlists from playlist service. End*/\r\n\r\n    /* Get Specific Playlist from playlist service. Begin*/\r\n    static async getSpecificPlaylist(req, res, playlistId){\r\n        try {\r\n            const playlistResponses = await agregateService.getSpecificPlaylistRequestMethod(playlistId);\r\n            return playlistResponses;\r\n        } catch (error) {\r\n            res.status(523);\r\n            console.log(\"Error: agregateService/getSpecificPlaylist\");\r\n            return JSON.stringify({message: 'Error: agregateService/getSpecificPlaylist'});\r\n        }\r\n    }\r\n    static getSpecificPlaylistRequestMethod(playlistId) {\r\n        return new Promise((resolve, reject) => {\r\n            reqPromGetSpecificPlaylist({\r\n                method: 'GET',\r\n                uri: 'http://localhost:1002/playlists/' + playlistId,\r\n                json: true\r\n            }).then(function (response) {\r\n                resolve(response);\r\n            }).catch(function (err) {\r\n                resolve(\"Error: agregateService/getSpecificPlaylistRequestMethod\");\r\n            });\r\n        });\r\n    }\r\n    /* Get Specific Playlist from playlist service. End*/\r\n\r\n    /* Create New Playlist in playlist service. Begin*/\r\n    static async createNewPlaylist(req, res, dataNewPlaylist, token){\r\n        try {\r\n            const playlistResponses = await agregateService.createNewPlaylistRequestMethod(dataNewPlaylist, token);\r\n            return playlistResponses;\r\n        } catch (error) {\r\n            res.status(523);\r\n            console.log(\"Error: agregateService/getSpecificPlaylist\");\r\n            return JSON.stringify({message: 'Error: agregateService/getSpecificPlaylist'});\r\n        }\r\n    }\r\n    static createNewPlaylistRequestMethod(dataNewPlaylist, token) {\r\n        return new Promise((resolve, reject) => {\r\n            reqPromCreateNewPlaylist({\r\n                method: 'POST',\r\n                uri: 'http://localhost:1002/playlists',\r\n                body: dataNewPlaylist,\r\n                json: true,\r\n                headers: {\r\n                    /* 'content-type': 'application/x-www-form-urlencoded' */ // Is set automatically\r\n                    Authorization: token\r\n                }\r\n            }).then(function (response) {\r\n                resolve(response);\r\n            }).catch(function (err) {\r\n                resolve(\"Error: agregateService/createNewPlaylistRequestMethod\");\r\n            });\r\n        });\r\n    }\r\n    /* Create New Playlist in playlist service. End*/\r\n\r\n    /* Update Specific Playlist in playlist service. Begin*/\r\n    static async updatePlaylist(req, res, dataUpdatePlaylist, playlistId, token){\r\n        try {\r\n            const playlistResponses = await agregateService.updatePlaylistRequestMethod(dataUpdatePlaylist, playlistId, token);\r\n            return playlistResponses;\r\n        } catch (error) {\r\n            res.status(523);\r\n            console.log(\"Error: agregateService/updatePlaylist\");\r\n            return JSON.stringify({message: 'Error: agregateService/updatePlaylist'});\r\n        }\r\n    }\r\n    static updatePlaylistRequestMethod(dataUpdatePlaylist, playlistId, token) {\r\n        return new Promise((resolve, reject) => {\r\n            reqPromUpdatePlaylist({\r\n                method: 'PUT',\r\n                uri: 'http://localhost:1002/playlists/' + playlistId,\r\n                body: dataUpdatePlaylist,\r\n                json: true,\r\n                headers: {\r\n                    /* 'content-type': 'application/x-www-form-urlencoded' */ // Is set automatically\r\n                    Authorization: token\r\n                }\r\n            }).then(function (response) {\r\n                resolve(response);\r\n            }).catch(function (err) {\r\n                resolve(\"Error: agregateService/updatePlaylistRequestMethod\");\r\n            });\r\n        });\r\n    }\r\n    /* Update Specific Playlist in playlist service. End*/\r\n\r\n    /* Delete Specific Playlist in playlist service. Begin*/\r\n    static async deletePlaylist(req, res, playlistId, token){\r\n        try {\r\n            const playlistResponses = await agregateService.deletePlaylistRequestMethod(playlistId, token);\r\n            return playlistResponses;\r\n        } catch (error) {\r\n            res.status(523);\r\n            console.log(\"Error: agregateService/deletePlaylist\");\r\n            return JSON.stringify({message: 'Error: agregateService/deletePlaylist'});\r\n        }\r\n    }\r\n    static deletePlaylistRequestMethod(playlistId, token) {\r\n        return new Promise((resolve, reject) => {\r\n            reqPromDeletePlaylist({\r\n                method: 'DELETE',\r\n                uri: 'http://localhost:1002/playlists/' + playlistId,\r\n                json: true,\r\n                headers: {\r\n                    /* 'content-type': 'application/x-www-form-urlencoded' */ // Is set automatically\r\n                    Authorization: token\r\n                }\r\n            }).then(function (response) {\r\n                resolve(response);\r\n            }).catch(function (err) {\r\n                resolve(\"Error: agregateService/deletePlaylistRequestMethod\");\r\n            });\r\n        });\r\n    }\r\n    /* Delete Specific User in user service. End*/\r\n\r\n    /* PLAYLISTS SERVICE. END */\r\n\r\n\r\n    /* AUTHORIZATION SERVICE. BEGIN */\r\n\r\n    // REDIRECT Method\r\n    static async authMethod(req, res, authData){\r\n        try {\r\n            const authDataResponses = await agregateService.authMethodHandler(authData);\r\n            return authDataResponses;\r\n        } catch (error) {\r\n            res.status(523);\r\n            console.log(\"Error: agregateService/authMethod\");\r\n            return JSON.stringify({message: 'Error: agregateService/authMethod'});\r\n        }\r\n    }\r\n    static authMethodHandler(authData) {\r\n        return new Promise((resolve, reject) => {\r\n            reqPromAuth({\r\n                method: 'POST',\r\n                uri: 'http://localhost:1337/auth',\r\n                body: authData,\r\n                json: true\r\n            }).then(function (response) {\r\n                resolve(response);\r\n            }).catch(function (err) {\r\n                resolve(\"Error: agregateService/authMethodHandler\");\r\n            });\r\n        });\r\n    }\r\n\r\n    // LOGIN Method\r\n    static async loginGetCode(req, res, dataLoginGetCode){\r\n        try {\r\n            const loginGetDataResponses = await agregateService.loginGetMethodHandler(dataLoginGetCode);\r\n            return loginGetDataResponses;\r\n        } catch (error) {\r\n            res.status(523);\r\n            console.log(\"Error: agregateService/loginGetCode\");\r\n            return JSON.stringify({message: 'Error: agregateService/loginGetCode'});\r\n        }\r\n    }\r\n    static loginGetMethodHandler(dataLoginGetCode) {\r\n        return new Promise((resolve, reject) => {\r\n            reqPromAuth({\r\n                method: 'POST',\r\n                uri: 'http://localhost:1337/login',\r\n                body: dataLoginGetCode,\r\n                json: true\r\n            }).then(function (response) {\r\n                resolve(response);\r\n            }).catch(function (err) {\r\n                resolve(\"Error: agregateService/loginGetMethodHandler\");\r\n            });\r\n        });\r\n    }\r\n\r\n    /* AUTHORIZATION SERVICE. BEGIN */\r\n\r\n\r\n\r\n}\r\n\r\nmodule.exports = agregateService.init();"]}