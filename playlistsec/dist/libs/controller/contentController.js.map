{"version":3,"sources":["../../../libs/controller/contentController.js"],"names":[],"mappings":"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","file":"contentController.js","sourcesContent":["\"use strict\";\r\nvar libs = process.cwd() + '/libs/';\r\nconst playlistService = require(libs + 'service/playlistService');\r\nconst url = require('url');\r\nlet cntOfItems, dataNewPlaylist;\r\n\r\nclass playlistController {\r\n\r\n    // Get all playlists from playlists (or size playlists)\r\n    static async getPlaylists(req, res) {\r\n        const countOfItems = url.parse(req.url, true).query.counts;\r\n        const tmp = (typeof(countOfItems)).localeCompare(\"undefined\");\r\n        if(tmp == 0){\r\n            cntOfItems = 10000;\r\n        }else {\r\n            cntOfItems = parseInt(countOfItems);\r\n        }\r\n        const size = parseInt(req.query.size, 10) || cntOfItems;\r\n        try {\r\n            const playlistResponses = await playlistService.getPlaylists(size);\r\n            res.send(playlistResponses);\r\n        } catch (error) {\r\n            res.status(523);\r\n            res.send(JSON.stringify({message: 'Error: playlistController/getPlaylists'}));\r\n            console.log(\"Error: playlistController/getPlaylists\");\r\n        }\r\n    }\r\n\r\n    // Get a specific playlist from playlists-table\r\n    static async getSpecificPlaylist(req, res) {\r\n        const playlistId = req.params.id;\r\n        try {\r\n            const playlistResponses = await playlistService.getSpecificPlaylist(playlistId);\r\n            res.send(playlistResponses);\r\n        } catch (error) {\r\n            res.status(523);\r\n            res.send(JSON.stringify({message: 'Error in playlistController/getSpecificPlaylist'}));\r\n            console.log(\"Error: playlistController/getSpecificPlaylist\");\r\n        }\r\n    }\r\n\r\n    // Create new playlist in playlists-table\r\n    static async createNewPlaylist (req, res) {\r\n        const usrId = parseInt(req.body.User_id).toString().localeCompare(\"NaN\");\r\n        if(usrId != 0){\r\n            dataNewPlaylist = req.body;\r\n            try {\r\n                const playlistResponses = await playlistService.createNewPlaylist(dataNewPlaylist);\r\n                res.send(playlistResponses);\r\n            } catch (error) {\r\n                console.log(\"Error: playlistController/createNewPlaylist\");\r\n                res.sendStatus(400);\r\n                res.send(JSON.stringify({message: 'Error: playlistController/createNewPlaylist'}));\r\n            }\r\n        }else{\r\n            res.send(\"Введите корректные данные\");\r\n        }\r\n    }\r\n\r\n    // Update specific playlist in playlists-table\r\n    static async updatePlaylist(req, res) {\r\n        const playlistId = req.params.id;\r\n        const usrId = parseInt(req.body.User_id).toString().localeCompare(\"NaN\");\r\n        if(usrId != 0){\r\n            const dataUpdatePlaylist = req.body;\r\n            try {\r\n                const playlistResponses = await playlistService.updatePlaylist(dataUpdatePlaylist, playlistId);\r\n                res.send(playlistResponses);\r\n            } catch (error) {\r\n                console.log(\"Error: playlistController/updatePlaylist\");\r\n                res.sendStatus(403);\r\n                res.send(JSON.stringify({message: 'Error: playlistController/updatePlaylist'}));\r\n            }\r\n        }else{\r\n            res.send(\"Введите корректные данные\");\r\n        }\r\n    }\r\n\r\n    // Delete a specific playlist in playlists-table\r\n    static async deletePlaylist(req, res) {\r\n        const playlistId = req.params.id;\r\n        try {\r\n            const playlistResponses = await playlistService.deletePlaylist(playlistId);\r\n            res.send(playlistResponses);\r\n        } catch (error) {\r\n            console.log(\"Error: playlistController/deletePlaylist\");\r\n            res.sendStatus(406);\r\n            res.send(JSON.stringify({message: 'Error: playlistController/deletePlaylist'}));\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = playlistController;"]}