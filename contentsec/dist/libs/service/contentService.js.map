{"version":3,"sources":["../../../libs/service/contentService.js"],"names":[],"mappings":"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","file":"contentService.js","sourcesContent":["let connection = undefined;\r\nconst mysql = require('mysql');\r\n\r\nclass contentService {\r\n    static init() {\r\n        connection = mysql.createConnection({\r\n            host: 'localhost',\r\n            user: 'root',\r\n            password: '',\r\n            database: 'contents'\r\n        });\r\n        return contentService;\r\n    }\r\n\r\n    // Get all contents from contents (or size contents)\r\n    static getContents(size) {\r\n        return new Promise((resolve, reject) => {\r\n            connection.connect(function (err) {\r\n                const query = connection.query('SELECT * FROM contents LIMIT ?', size, function (err, result) {\r\n                    console.log(result);\r\n                    resolve(result);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    // Get a specific content from contents-table\r\n    static getSpecificContent(contentId) {\r\n        return new Promise((resolve, reject) => {\r\n            connection.connect(function (err) {\r\n                const query = connection.query('SELECT * FROM contents WHERE id=?', contentId, function (err, result) {\r\n                    console.log(JSON.stringify(result));\r\n                    resolve(result);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    // Create new content in contents-table\r\n    static createNewContent(dataNewContent) {\r\n        return new Promise((resolve, reject) => {\r\n            const insertValues = {\r\n                \"Title\" : dataNewContent.Title,\r\n                \"Genre\" : dataNewContent.Genre,\r\n                \"Country\" : dataNewContent.Country\r\n            };\r\n            connection.connect(function (err) {\r\n                const query = connection.query('INSERT INTO contents SET ?', insertValues, function (err, result) {\r\n                    if(!err){\r\n                        resolve(JSON.stringify({message: 'New Content Created!'}));\r\n                    }else{\r\n                        resolve(JSON.stringify({message: 'Error: New Content Was Not Created!'}));\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    // Update specific content in contents-table\r\n    static updateContent(dataUpdateContent, contentId) {\r\n        return new Promise((resolve, reject) => {\r\n            const insertValues = {\r\n                Title : dataUpdateContent.Title,\r\n                Genre : dataUpdateContent.Genre,\r\n                Country : dataUpdateContent.Country\r\n            };\r\n            connection.connect(function (err) {\r\n                const query = connection.query('UPDATE contents set ? WHERE id = ?', [insertValues, contentId], function (err, result) {\r\n                    console.log(result);\r\n                    resolve(result);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    // Delete a specific content in contents-table\r\n    static deleteContent(contentId) {\r\n        return new Promise((resolve, reject) => {\r\n            connection.connect(function (err) {\r\n                const query = connection.query('DELETE FROM contents WHERE id = ?', [contentId], function (err, result) {\r\n                    resolve(result);\r\n                });\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nmodule.exports = contentService.init();"]}