{"version":3,"sources":["../../../libs/service/playlistService.js"],"names":[],"mappings":"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","file":"playlistService.js","sourcesContent":["const mysql = require('mysql');\r\n\r\nlet connection = undefined;\r\n\r\nclass playlistService {\r\n    static init() {\r\n        connection = mysql.createConnection({\r\n            host: 'localhost',\r\n            user: 'root',\r\n            password: '',\r\n            database: 'playlists'\r\n        });\r\n        return playlistService;\r\n    }\r\n\r\n    // Get all playlists from playlists (or size playlists)\r\n    static getAllPlaylists(size) {\r\n        return new Promise((resolve, reject) => {\r\n            connection.connect(function (err) {\r\n                const query = connection.query('SELECT * FROM playlists LIMIT ?', size, function (err, result) {\r\n                    console.log(result);\r\n                    resolve(result);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    // Get a specific playlist from playlists-table\r\n    static getSpecificPlaylist(playlistId) {\r\n        return new Promise((resolve, reject) => {\r\n            connection.connect(function (err) {\r\n                const query = connection.query('SELECT * FROM playlists WHERE id=?', playlistId, function (err, result) {\r\n                    console.log(result);\r\n                    resolve(result);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    // Create new content in contents-table\r\n    static createNewPlaylist(dataNewPlaylist) {\r\n        return new Promise((resolve, reject) => {\r\n            const insertValues = {\r\n                \"Title\" : dataNewPlaylist.Title,\r\n                \"User_id\" : dataNewPlaylist.User_id\r\n            };\r\n            connection.connect(function (err) {\r\n                const query = connection.query('INSERT INTO playlists SET ?', insertValues, function (err, result) {\r\n                    if(!err){\r\n                        resolve(JSON.stringify({message: 'New Playlist Created!'}));\r\n                    }else{\r\n                        resolve(JSON.stringify({message: 'Error: New Playlist Was Not Created!'}));\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    // Update specific playlist in playlists-table\r\n    static updatePlaylist(dataUpdatePlaylist, playlistId) {\r\n        return new Promise((resolve, reject) => {\r\n            const insertValues = {\r\n                \"Title\" : dataUpdatePlaylist.Title,\r\n                \"User_id\" : dataUpdatePlaylist.User_id\r\n            };\r\n            connection.connect(function (err) {\r\n                const query = connection.query('UPDATE playlists set ? WHERE id = ?', [insertValues, playlistId], function (err, result) {\r\n                    console.log(result);\r\n                    resolve(result);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    // Delete a specific playlist in playlists-table\r\n    static deletePlaylist(playlistId) {\r\n        return new Promise((resolve, reject) => {\r\n            connection.connect(function (err) {\r\n                const query = connection.query('DELETE FROM playlists WHERE id = ?', [playlistId], function (err, result) {\r\n                    resolve(result);\r\n                });\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nmodule.exports = playlistService.init();"]}